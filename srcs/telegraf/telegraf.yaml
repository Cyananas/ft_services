apiVersion: v1
kind: Service 
metadata:
  name: telegraf
spec:
  type: ClusterIP
  selector:
    app: telegraf
  ports:
  - port: 8185
    targetPort: 8185
    name: telegraf

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegraf
  labels:
    app: telegraf
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telegraf
  template:
    metadata:
      labels:
        app: telegraf
    spec:
      serviceAccountName: telegraf
      containers:
      - image: services/telegraf
        imagePullPolicy: Never
        name: telegraf
        ports:
        - containerPort: 8125
        livenessProbe:
          exec:
            command:
              - sh
              - liveness_probe.sh
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
        - name: telegraf-endpoint           # entry point of the docker API (= the unix port that the docker daemon listens to by default)
          mountPath: "/var/run/docker.sock" # we give access to docker events
      volumes:                              # the docker api exposes the events endpoint which can be used to directly follow the events generated by the docker daemon
      - name: telegraf-endpoint
        hostPath:
          path: /var/run/docker.sock

---

apiVersion: v1
kind: ServiceAccount # we create an account allowing telegraf to access the whole cluster
metadata:             
  name: telegraf    # a token will be automatically created in the dashboard and referenced on behalf of telegraf
  labels:
    app: telegraf

---

apiVersion: rbac.authorization.k8s.io/v1 # RBAC is a method of regulating access to cluster resources
kind: ClusterRoleBinding  # an RBAC role contains rules that represent a set of permissions
metadata:                 # ClusterRoleBinding grants cluster-wide access permissions
  name: telegraf          # we grant in some way the privileges admin to telegraf
subjects:
- kind: ServiceAccount
  name: telegraf
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io